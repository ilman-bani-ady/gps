{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport * as mqtt from 'mqtt/dist/mqtt';\nfunction Map() {\n  const mapRef = useRef(null);\n  const [vehicles, setVehicles] = useState([]);\n  const markersRef = useRef({});\n  const mapInstance = useRef(null);\n  const mqttClient = useRef(null);\n\n  // Fetch registered vehicles\n  useEffect(() => {\n    const fetchVehicles = async () => {\n      try {\n        const response = await axios.get('http://localhost:3013/api/devices');\n        console.log('Fetched vehicles:', response.data.data);\n        setVehicles(response.data.data);\n      } catch (err) {\n        console.error('Error fetching vehicles:', err);\n      }\n    };\n    fetchVehicles();\n  }, []);\n\n  // Initialize MQTT connection\n  useEffect(() => {\n    // MQTT connection options\n    const options = {\n      protocol: 'ws',\n      hostname: 'localhost',\n      port: 8083,\n      path: '/mqtt',\n      clientId: 'map_client_' + Math.random().toString(16).substr(2, 8)\n    };\n    console.log('Connecting to MQTT broker...');\n    mqttClient.current = mqtt.connect(`ws://${options.hostname}:${options.port}/mqtt`);\n    mqttClient.current.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      mqttClient.current.subscribe('gps/location', err => {\n        if (!err) {\n          console.log('Subscribed to gps/location');\n        } else {\n          console.error('Subscription error:', err);\n        }\n      });\n    });\n    mqttClient.current.on('message', (topic, message) => {\n      try {\n        const locationData = JSON.parse(message.toString());\n        console.log('Received location data:', locationData);\n        updateVehicleLocation(locationData);\n      } catch (err) {\n        console.error('Error processing MQTT message:', err);\n      }\n    });\n    mqttClient.current.on('error', err => {\n      console.error('MQTT Error:', err);\n    });\n    return () => {\n      if (mqttClient.current) {\n        mqttClient.current.end();\n      }\n    };\n  }, []);\n\n  // Initialize map\n  useEffect(() => {\n    if (!mapRef.current) return;\n    const jakartaCoords = [-6.2088, 106.8456];\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 12\n    });\n    mapInstance.current = map;\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(map);\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n      }\n    };\n  }, []);\n\n  // Update vehicle location on map\n  const updateVehicleLocation = locationData => {\n    if (!mapInstance.current || !locationData) return;\n    const {\n      device_id,\n      latitude,\n      longitude\n    } = locationData;\n    console.log(`Updating location for device ${device_id}: ${latitude}, ${longitude}`);\n    const vehicle = vehicles.find(v => v.device_id === device_id);\n    if (!vehicle) {\n      console.log(`Unregistered device: ${device_id}`);\n      return;\n    }\n    if (markersRef.current[device_id]) {\n      // Update existing marker\n      const marker = markersRef.current[device_id];\n      marker.setLatLng([latitude, longitude]);\n      marker.getPopup().setContent(`\n        <div style=\"text-align: center;\">\n          <b>${vehicle.device_name}</b><br>\n          ID: ${vehicle.device_id}<br>\n          Reg No: ${vehicle.reg_no}<br>\n          Lat: ${latitude}<br>\n          Lng: ${longitude}<br>\n          Last Update: ${new Date().toLocaleTimeString()}\n        </div>\n      `);\n    } else {\n      // Create new marker\n      console.log(`Creating new marker for device ${device_id}`);\n      const marker = L.marker([latitude, longitude]).bindPopup(`\n          <div style=\"text-align: center;\">\n            <b>${vehicle.device_name}</b><br>\n            ID: ${vehicle.device_id}<br>\n            Reg No: ${vehicle.reg_no}<br>\n            Lat: ${latitude}<br>\n            Lng: ${longitude}<br>\n            Last Update: ${new Date().toLocaleTimeString()}\n          </div>\n        `).addTo(mapInstance.current);\n      markersRef.current[device_id] = marker;\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: 'calc(100vh - 60px)',\n      width: '100%',\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  });\n}\nexport default Map;","map":{"version":3,"names":["React","useEffect","useRef","useState","L","axios","mqtt","Map","mapRef","vehicles","setVehicles","markersRef","mapInstance","mqttClient","fetchVehicles","response","get","console","log","data","err","error","options","protocol","hostname","port","path","clientId","Math","random","toString","substr","current","connect","on","subscribe","topic","message","locationData","JSON","parse","updateVehicleLocation","end","jakartaCoords","map","center","zoom","tileLayer","attribution","addTo","remove","device_id","latitude","longitude","vehicle","find","v","marker","setLatLng","getPopup","setContent","device_name","reg_no","Date","toLocaleTimeString","bindPopup","createElement","ref","className","style","height","width","position","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport * as mqtt from 'mqtt/dist/mqtt';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const [vehicles, setVehicles] = useState([]);\n  const markersRef = useRef({});\n  const mapInstance = useRef(null);\n  const mqttClient = useRef(null);\n\n  // Fetch registered vehicles\n  useEffect(() => {\n    const fetchVehicles = async () => {\n      try {\n        const response = await axios.get('http://localhost:3013/api/devices');\n        console.log('Fetched vehicles:', response.data.data);\n        setVehicles(response.data.data);\n      } catch (err) {\n        console.error('Error fetching vehicles:', err);\n      }\n    };\n    fetchVehicles();\n  }, []);\n\n  // Initialize MQTT connection\n  useEffect(() => {\n    // MQTT connection options\n    const options = {\n      protocol: 'ws',\n      hostname: 'localhost',\n      port: 8083,\n      path: '/mqtt',\n      clientId: 'map_client_' + Math.random().toString(16).substr(2, 8)\n    };\n\n    console.log('Connecting to MQTT broker...');\n    mqttClient.current = mqtt.connect(`ws://${options.hostname}:${options.port}/mqtt`);\n\n    mqttClient.current.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      mqttClient.current.subscribe('gps/location', (err) => {\n        if (!err) {\n          console.log('Subscribed to gps/location');\n        } else {\n          console.error('Subscription error:', err);\n        }\n      });\n    });\n\n    mqttClient.current.on('message', (topic, message) => {\n      try {\n        const locationData = JSON.parse(message.toString());\n        console.log('Received location data:', locationData);\n        updateVehicleLocation(locationData);\n      } catch (err) {\n        console.error('Error processing MQTT message:', err);\n      }\n    });\n\n    mqttClient.current.on('error', (err) => {\n      console.error('MQTT Error:', err);\n    });\n\n    return () => {\n      if (mqttClient.current) {\n        mqttClient.current.end();\n      }\n    };\n  }, []);\n\n  // Initialize map\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    const jakartaCoords = [-6.2088, 106.8456];\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 12\n    });\n    mapInstance.current = map;\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(map);\n\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n      }\n    };\n  }, []);\n\n  // Update vehicle location on map\n  const updateVehicleLocation = (locationData) => {\n    if (!mapInstance.current || !locationData) return;\n\n    const { device_id, latitude, longitude } = locationData;\n    console.log(`Updating location for device ${device_id}: ${latitude}, ${longitude}`);\n\n    const vehicle = vehicles.find(v => v.device_id === device_id);\n    if (!vehicle) {\n      console.log(`Unregistered device: ${device_id}`);\n      return;\n    }\n\n    if (markersRef.current[device_id]) {\n      // Update existing marker\n      const marker = markersRef.current[device_id];\n      marker.setLatLng([latitude, longitude]);\n      marker.getPopup().setContent(`\n        <div style=\"text-align: center;\">\n          <b>${vehicle.device_name}</b><br>\n          ID: ${vehicle.device_id}<br>\n          Reg No: ${vehicle.reg_no}<br>\n          Lat: ${latitude}<br>\n          Lng: ${longitude}<br>\n          Last Update: ${new Date().toLocaleTimeString()}\n        </div>\n      `);\n    } else {\n      // Create new marker\n      console.log(`Creating new marker for device ${device_id}`);\n      const marker = L.marker([latitude, longitude])\n        .bindPopup(`\n          <div style=\"text-align: center;\">\n            <b>${vehicle.device_name}</b><br>\n            ID: ${vehicle.device_id}<br>\n            Reg No: ${vehicle.reg_no}<br>\n            Lat: ${latitude}<br>\n            Lng: ${longitude}<br>\n            Last Update: ${new Date().toLocaleTimeString()}\n          </div>\n        `)\n        .addTo(mapInstance.current);\n\n      markersRef.current[device_id] = marker;\n    }\n  };\n\n  return (\n    <div \n      ref={mapRef} \n      className=\"map-container\" \n      style={{ \n        height: 'calc(100vh - 60px)',\n        width: '100%',\n        position: 'relative'\n      }} \n    />\n  );\n}\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}