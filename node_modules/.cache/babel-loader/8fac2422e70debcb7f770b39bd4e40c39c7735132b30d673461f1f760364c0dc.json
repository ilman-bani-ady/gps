{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\n// Define the MQTT topic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MQTT_TOPIC = \"gps/location\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const [marker, setMarker] = useState(null);\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    // Jakarta coordinates\n\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const mapInstance = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    setMap(mapInstance);\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(mapInstance);\n\n    // Initialize marker\n    const initialMarker = L.marker(jakartaCoords).addTo(mapInstance);\n    setMarker(initialMarker);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect('ws://localhost:9001');\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n\n          // Update marker position\n          if (marker) {\n            marker.setLatLng(newPosition);\n          }\n\n          // Optional: Center map on new position\n          mapInstance.setView(newPosition);\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(mapInstance);\n\n    // Cleanup function\n    return () => {\n      client.end();\n      mapInstance.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n}\n_s(Map, \"3HmR5bwEwcRmVtLfVGJu2iy3tzI=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","turf","mqtt","jsxDEV","_jsxDEV","MQTT_TOPIC","Map","_s","mapRef","marker","setMarker","map","setMap","jakartaCoords","mapInstance","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","initialMarker","client","connect","on","console","log","subscribe","topic","message","locationData","JSON","parse","toString","newPosition","latitude","longitude","setLatLng","setView","error","control","position","end","remove","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\n// Define the MQTT topic\nconst MQTT_TOPIC = \"gps/location\";\n\n\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const [marker, setMarker] = useState(null);\n  const [map, setMap] = useState(null);\n\n  useEffect(() => {\n    // Jakarta coordinates\n    \n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const mapInstance = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    setMap(mapInstance);\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(mapInstance);\n\n    // Initialize marker\n    const initialMarker = L.marker(jakartaCoords).addTo(mapInstance);\n    setMarker(initialMarker);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect('ws://localhost:9001');\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n          \n          // Update marker position\n          if (marker) {\n            marker.setLatLng(newPosition);\n          }\n          \n          // Optional: Center map on new position\n          mapInstance.setView(newPosition);\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(mapInstance);\n\n    // Cleanup function\n    return () => {\n      client.end();\n      mapInstance.remove();\n    };\n  }, []);\n\n  return <div ref={mapRef} className=\"map-container\" />;\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}