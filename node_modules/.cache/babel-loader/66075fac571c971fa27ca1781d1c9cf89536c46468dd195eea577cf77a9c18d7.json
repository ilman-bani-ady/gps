{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport mqtt from 'mqtt'; // Import the MQTT library\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const [marker, setMarker] = useState(null);\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    // Initialize the map\n    const jakartaCoords = [-6.2088, 106.8456];\n    const initializedMap = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(initializedMap);\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10; // 10 km radius\n    const options = {\n      steps: 64,\n      units: 'kilometers'\n    };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert Turf circle to Leaflet layer and add to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(initializedMap);\n\n    // Add a marker for Jakarta city center\n    const jakartaMarker = L.marker(jakartaCoords).addTo(initializedMap).bindPopup('Jakarta City Center').openPopup();\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(initializedMap);\n    setMap(initializedMap);\n    setMarker(jakartaMarker);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect('mqtt://localhost', {\n      port: 1883\n    });\n    client.on('connect', () => {\n      console.log('Connected to MQTT Broker');\n      client.subscribe('gps/location', err => {\n        if (err) {\n          console.error('Failed to subscribe:', err);\n        }\n      });\n    });\n    client.on('message', (topic, message) => {\n      const locationData = JSON.parse(message.toString());\n      const {\n        latitude,\n        longitude\n      } = locationData;\n      console.log(`Received location data: ${JSON.stringify(locationData)}`);\n\n      // Update the marker's position\n      if (marker) {\n        marker.setLatLng([latitude, longitude]);\n      } else {\n        const newMarker = L.marker([latitude, longitude]).addTo(initializedMap);\n        setMarker(newMarker);\n      }\n\n      // Optionally, pan the map to the new marker position\n      initializedMap.setView([latitude, longitude], 13);\n    });\n\n    // Cleanup function\n    return () => {\n      client.end(); // Disconnect from the MQTT broker\n      initializedMap.remove(); // Remove the map instance\n    };\n  }, []); // Empty dependency array ensures this effect runs once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: '100vh',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 10\n  }, this);\n}\n_s(Map, \"3HmR5bwEwcRmVtLfVGJu2iy3tzI=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","turf","mqtt","jsxDEV","_jsxDEV","Map","_s","mapRef","marker","setMarker","map","setMap","jakartaCoords","initializedMap","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","point","radius","options","steps","units","circle","geoJSON","style","color","weight","opacity","fillOpacity","jakartaMarker","bindPopup","openPopup","control","position","client","connect","port","on","console","log","subscribe","err","error","topic","message","locationData","JSON","parse","toString","latitude","longitude","stringify","setLatLng","newMarker","setView","end","remove","ref","className","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport mqtt from 'mqtt'; // Import the MQTT library\nimport 'leaflet/dist/leaflet.css';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const [marker, setMarker] = useState(null);\n  const [map, setMap] = useState(null);\n\n  useEffect(() => {\n    // Initialize the map\n    const jakartaCoords = [-6.2088, 106.8456];\n    const initializedMap = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false,\n    });\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20,\n    }).addTo(initializedMap);\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10; // 10 km radius\n    const options = { steps: 64, units: 'kilometers' };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert Turf circle to Leaflet layer and add to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1,\n      },\n    }).addTo(initializedMap);\n\n    // Add a marker for Jakarta city center\n    const jakartaMarker = L.marker(jakartaCoords).addTo(initializedMap)\n      .bindPopup('Jakarta City Center')\n      .openPopup();\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright',\n    }).addTo(initializedMap);\n\n    setMap(initializedMap);\n    setMarker(jakartaMarker);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect('mqtt://localhost', { port: 1883 });\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT Broker');\n      client.subscribe('gps/location', (err) => {\n        if (err) {\n          console.error('Failed to subscribe:', err);\n        }\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      const locationData = JSON.parse(message.toString());\n      const { latitude, longitude } = locationData;\n\n      console.log(`Received location data: ${JSON.stringify(locationData)}`);\n      \n      // Update the marker's position\n      if (marker) {\n        marker.setLatLng([latitude, longitude]);\n      } else {\n        const newMarker = L.marker([latitude, longitude]).addTo(initializedMap);\n        setMarker(newMarker);\n      }\n\n      // Optionally, pan the map to the new marker position\n      initializedMap.setView([latitude, longitude], 13);\n    });\n\n    // Cleanup function\n    return () => {\n      client.end(); // Disconnect from the MQTT broker\n      initializedMap.remove(); // Remove the map instance\n    };\n  }, []); // Empty dependency array ensures this effect runs once\n\n  return <div ref={mapRef} className=\"map-container\" style={{ height: '100vh', width: '100%' }} />;\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}