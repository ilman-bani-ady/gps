{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const [location, setLocation] = useState(null);\n  useEffect(() => {\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10; // 10 km radius\n    const options = {\n      steps: 64,\n      units: 'kilometers'\n    };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert Turf circle to Leaflet layer and add to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n\n    // Add a marker for Jakarta city center\n    const marker = L.marker(jakartaCoords).addTo(map).bindPopup('Jakarta City Center').openPopup();\n    markerRef.current = marker; // Store marker reference\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // MQTT setup\n    const client = mqtt.connect('ws://localhost:1883'); // Use 'ws' protocol for web clients\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT Broker');\n      client.subscribe('gps/location', err => {\n        if (err) console.error('Subscription error:', err);\n      });\n    });\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      setLocation(data); // Update location state with new coordinates\n    });\n\n    // Cleanup function\n    return () => {\n      map.remove();\n      client.end();\n    };\n  }, []);\n  useEffect(() => {\n    // Update marker location when `location` state changes\n    if (location && markerRef.current) {\n      const {\n        latitude,\n        longitude\n      } = location;\n      const newLatLng = new L.LatLng(latitude, longitude);\n      markerRef.current.setLatLng(newLatLng);\n      markerRef.current.bindPopup(`Location updated: [${latitude}, ${longitude}]`).openPopup();\n    }\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n}\n_s(Map, \"MZI1cg/cQb8nb4r3VC7qiii6qrw=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","turf","mqtt","jsxDEV","_jsxDEV","Map","_s","mapRef","markerRef","location","setLocation","jakartaCoords","map","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","point","radius","options","steps","units","circle","geoJSON","style","color","weight","opacity","fillOpacity","marker","bindPopup","openPopup","control","position","client","connect","on","console","log","subscribe","err","error","topic","message","data","JSON","parse","toString","remove","end","latitude","longitude","newLatLng","LatLng","setLatLng","ref","className","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const [location, setLocation] = useState(null);\n\n  useEffect(() => {\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10; // 10 km radius\n    const options = { steps: 64, units: 'kilometers' };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert Turf circle to Leaflet layer and add to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n\n    // Add a marker for Jakarta city center\n    const marker = L.marker(jakartaCoords).addTo(map)\n      .bindPopup('Jakarta City Center')\n      .openPopup();\n\n    markerRef.current = marker;  // Store marker reference\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // MQTT setup\n    const client = mqtt.connect('ws://localhost:1883');  // Use 'ws' protocol for web clients\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT Broker');\n      client.subscribe('gps/location', (err) => {\n        if (err) console.error('Subscription error:', err);\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      setLocation(data);  // Update location state with new coordinates\n    });\n\n    // Cleanup function\n    return () => {\n      map.remove();\n      client.end();\n    };\n  }, []);\n\n  useEffect(() => {\n    // Update marker location when `location` state changes\n    if (location && markerRef.current) {\n      const { latitude, longitude } = location;\n      const newLatLng = new L.LatLng(latitude, longitude);\n      markerRef.current.setLatLng(newLatLng);\n      markerRef.current.bindPopup(`Location updated: [${latitude}, ${longitude}]`).openPopup();\n    }\n  }, [location]);\n\n  return <div ref={mapRef} className=\"map-container\" style={{ height: '100vh' }} />;\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}