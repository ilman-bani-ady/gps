{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\";\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport * as mqtt from 'mqtt/dist/mqtt';\nimport 'leaflet/dist/leaflet.css';\nfunction Map() {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef({});\n  useEffect(() => {\n    // Coordinates for Jakarta as the center point\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the Leaflet map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstance.current = map;\n\n    // Add a tile layer for the map\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create a circle around Jakarta with a radius of 10 km using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10;\n    const options = {\n      steps: 64,\n      units: 'kilometers'\n    };\n    const circle = turf.circle(center, radius, options);\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // Menggunakan WebSocket untuk koneksi MQTT\n    const client = mqtt.connect('ws://localhost:1883/mqtt', {\n      clientId: `map_client_${Math.random().toString(16).substring(2, 8)}`,\n      clean: true,\n      connectTimeout: 4000,\n      reconnectPeriod: 1000\n    });\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('gps/location', err => {\n        if (!err) {\n          console.log('Subscribed to gps/location topic');\n        }\n      });\n    });\n    client.on('error', err => {\n      console.error('MQTT connection error:', err);\n    });\n    client.on('message', (topic, message) => {\n      console.log(`Received message on topic: ${topic}`);\n      console.log(`Raw message: ${message.toString()}`);\n      try {\n        const locationData = JSON.parse(message.toString());\n        console.log('Parsed message:', locationData);\n        const {\n          device_id,\n          latitude,\n          longitude\n        } = locationData;\n        if (!device_id || !latitude || !longitude) {\n          console.error('Incomplete data received:', locationData);\n          return;\n        }\n        console.log(`Processing data for Device ID: ${device_id}`);\n        console.log(`Latitude: ${latitude}, Longitude: ${longitude}`);\n        const latlng = [parseFloat(latitude), parseFloat(longitude)];\n        if (markersRef.current[device_id]) {\n          console.log(`Updating marker for Device ID: ${device_id}`);\n          markersRef.current[device_id].setLatLng(latlng);\n          markersRef.current[device_id].getPopup().setContent(`\n            <div>\n              <strong>Device ID:</strong> ${device_id}<br>\n              <strong>Latitude:</strong> ${latitude}<br>\n              <strong>Longitude:</strong> ${longitude}<br>\n              <strong>Last Update:</strong> ${new Date().toLocaleTimeString()}\n            </div>\n          `);\n        } else {\n          console.log(`Creating new marker for Device ID: ${device_id}`);\n          const marker = L.marker(latlng).bindPopup(`\n              <div>\n                <strong>Device ID:</strong> ${device_id}<br>\n                <strong>Latitude:</strong> ${latitude}<br>\n                <strong>Longitude:</strong> ${longitude}<br>\n                <strong>Last Update:</strong> ${new Date().toLocaleTimeString()}\n              </div>\n            `).addTo(mapInstance.current);\n          markersRef.current[device_id] = marker;\n        }\n      } catch (err) {\n        console.error('Error processing MQTT message:', err);\n      }\n    });\n    return () => {\n      map.remove();\n      client.end();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: 'calc(100vh - 60px)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 10\n    }\n  });\n}\nexport default Map;","map":{"version":3,"names":["React","useEffect","useRef","L","turf","mqtt","Map","mapRef","mapInstance","markersRef","jakartaCoords","map","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","point","radius","options","steps","units","circle","geoJSON","style","color","weight","opacity","fillOpacity","control","position","client","connect","clientId","Math","random","toString","substring","clean","connectTimeout","reconnectPeriod","on","console","log","subscribe","err","error","topic","message","locationData","JSON","parse","device_id","latitude","longitude","latlng","parseFloat","setLatLng","getPopup","setContent","Date","toLocaleTimeString","marker","bindPopup","remove","end","createElement","ref","className","height","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport * as mqtt from 'mqtt/dist/mqtt';\nimport 'leaflet/dist/leaflet.css';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markersRef = useRef({});\n\n  useEffect(() => {\n    // Coordinates for Jakarta as the center point\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the Leaflet map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false,\n    });\n    mapInstance.current = map;\n\n    // Add a tile layer for the map\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20,\n    }).addTo(map);\n\n    // Create a circle around Jakarta with a radius of 10 km using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10;\n    const options = { steps: 64, units: 'kilometers' };\n    const circle = turf.circle(center, radius, options);\n\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1,\n      },\n    }).addTo(map);\n\n    L.control.zoom({\n      position: 'topright',\n    }).addTo(map);\n\n    // Menggunakan WebSocket untuk koneksi MQTT\n    const client = mqtt.connect('ws://localhost:1883/mqtt', {\n      clientId: `map_client_${Math.random().toString(16).substring(2, 8)}`,\n      clean: true,\n      connectTimeout: 4000,\n      reconnectPeriod: 1000,\n    });\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('gps/location', (err) => {\n        if (!err) {\n          console.log('Subscribed to gps/location topic');\n        }\n      });\n    });\n\n    client.on('error', (err) => {\n      console.error('MQTT connection error:', err);\n    });\n\n    client.on('message', (topic, message) => {\n      console.log(`Received message on topic: ${topic}`);\n      console.log(`Raw message: ${message.toString()}`);\n      \n      try {\n        const locationData = JSON.parse(message.toString());\n        console.log('Parsed message:', locationData);\n    \n        const { device_id, latitude, longitude } = locationData;\n    \n        if (!device_id || !latitude || !longitude) {\n          console.error('Incomplete data received:', locationData);\n          return;\n        }\n    \n        console.log(`Processing data for Device ID: ${device_id}`);\n        console.log(`Latitude: ${latitude}, Longitude: ${longitude}`);\n    \n        const latlng = [parseFloat(latitude), parseFloat(longitude)];\n        \n        if (markersRef.current[device_id]) {\n          console.log(`Updating marker for Device ID: ${device_id}`);\n          markersRef.current[device_id].setLatLng(latlng);\n          markersRef.current[device_id].getPopup().setContent(`\n            <div>\n              <strong>Device ID:</strong> ${device_id}<br>\n              <strong>Latitude:</strong> ${latitude}<br>\n              <strong>Longitude:</strong> ${longitude}<br>\n              <strong>Last Update:</strong> ${new Date().toLocaleTimeString()}\n            </div>\n          `);\n        } else {\n          console.log(`Creating new marker for Device ID: ${device_id}`);\n          const marker = L.marker(latlng)\n            .bindPopup(`\n              <div>\n                <strong>Device ID:</strong> ${device_id}<br>\n                <strong>Latitude:</strong> ${latitude}<br>\n                <strong>Longitude:</strong> ${longitude}<br>\n                <strong>Last Update:</strong> ${new Date().toLocaleTimeString()}\n              </div>\n            `)\n            .addTo(mapInstance.current);\n          markersRef.current[device_id] = marker;\n        }\n      } catch (err) {\n        console.error('Error processing MQTT message:', err);\n      }\n    });\n\n    return () => {\n      map.remove();\n      client.end();\n    };\n  }, []);\n\n  return <div ref={mapRef} className=\"map-container\" style={{ height: 'calc(100vh - 60px)' }} />;\n}\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}