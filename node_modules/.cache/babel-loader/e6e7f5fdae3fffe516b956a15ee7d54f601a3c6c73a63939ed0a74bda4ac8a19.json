{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const [location, setLocation] = useState({\n    latitude: -6.2088,\n    longitude: 106.8456\n  });\n  useEffect(() => {\n    // MQTT Configuration\n    const MQTT_BROKER = 'mqtt://localhost:1883';\n    const MQTT_TOPIC = 'gps/location';\n    const client = mqtt.connect(MQTT_BROKER);\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC, err => {\n        if (err) {\n          console.error('Subscription error:', err);\n        } else {\n          console.log(`Subscribed to topic: ${MQTT_TOPIC}`);\n        }\n      });\n    });\n    client.on('message', (topic, message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        setLocation({\n          latitude: data.latitude,\n          longitude: data.longitude\n        });\n      } catch (error) {\n        console.error('Error processing message:', error);\n      }\n    });\n    client.on('error', error => console.error('MQTT Error:', error));\n    client.on('close', () => console.log('Disconnected from MQTT broker'));\n\n    // Handle cleanup on component unmount\n    return () => {\n      client.end();\n    };\n  }, []);\n  useEffect(() => {\n    const jakartaCoords = [location.latitude, location.longitude];\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n    const center = turf.point(jakartaCoords);\n    const radius = 10;\n    const options = {\n      steps: 64,\n      units: 'kilometers'\n    };\n    const circle = turf.circle(center, radius, options);\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n    markerRef.current = L.marker(jakartaCoords).addTo(map).bindPopup('Current Location').openPopup();\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n    return () => map.remove();\n  }, []);\n  useEffect(() => {\n    if (markerRef.current) {\n      markerRef.current.setLatLng([location.latitude, location.longitude]).bindPopup('Updated Location').openPopup();\n    }\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 10\n  }, this);\n}\n_s(Map, \"J3TnEvtHHaflGTkhfytzEXp6Id8=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","turf","mqtt","jsxDEV","_jsxDEV","Map","_s","mapRef","markerRef","location","setLocation","latitude","longitude","MQTT_BROKER","MQTT_TOPIC","client","connect","on","console","log","subscribe","err","error","topic","message","data","JSON","parse","toString","end","jakartaCoords","map","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","point","radius","options","steps","units","circle","geoJSON","style","color","weight","opacity","fillOpacity","marker","bindPopup","openPopup","control","position","remove","setLatLng","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const [location, setLocation] = useState({ latitude: -6.2088, longitude: 106.8456 });\n\n  useEffect(() => {\n    // MQTT Configuration\n    const MQTT_BROKER = 'mqtt://localhost:1883';\n    const MQTT_TOPIC = 'gps/location';\n\n    const client = mqtt.connect(MQTT_BROKER);\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC, (err) => {\n        if (err) {\n          console.error('Subscription error:', err);\n        } else {\n          console.log(`Subscribed to topic: ${MQTT_TOPIC}`);\n        }\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        setLocation({\n          latitude: data.latitude,\n          longitude: data.longitude,\n        });\n      } catch (error) {\n        console.error('Error processing message:', error);\n      }\n    });\n\n    client.on('error', (error) => console.error('MQTT Error:', error));\n    client.on('close', () => console.log('Disconnected from MQTT broker'));\n\n    // Handle cleanup on component unmount\n    return () => {\n      client.end();\n    };\n  }, []);\n\n  useEffect(() => {\n    const jakartaCoords = [location.latitude, location.longitude];\n\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false,\n    });\n\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20,\n    }).addTo(map);\n\n    const center = turf.point(jakartaCoords);\n    const radius = 10;\n    const options = { steps: 64, units: 'kilometers' };\n    const circle = turf.circle(center, radius, options);\n\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1,\n      },\n    }).addTo(map);\n\n    markerRef.current = L.marker(jakartaCoords).addTo(map).bindPopup('Current Location').openPopup();\n\n    L.control.zoom({ position: 'topright' }).addTo(map);\n\n    return () => map.remove();\n  }, []);\n\n  useEffect(() => {\n    if (markerRef.current) {\n      markerRef.current.setLatLng([location.latitude, location.longitude]).bindPopup('Updated Location').openPopup();\n    }\n  }, [location]);\n\n  return <div ref={mapRef} className=\"map-container\" />;\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}