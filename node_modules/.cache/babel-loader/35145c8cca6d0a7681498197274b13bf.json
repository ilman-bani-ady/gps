{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\nfunction Map() {\n  const mapRef = useRef(null);\n  const [vehicles, setVehicles] = useState([]);\n  const [markers, setMarkers] = useState({});\n  const mapInstance = useRef(null);\n\n  // Fetch registered vehicles\n  useEffect(() => {\n    const fetchVehicles = async () => {\n      try {\n        const response = await axios.get('http://localhost:3013/api/devices');\n        setVehicles(response.data.data);\n      } catch (err) {\n        console.error('Error fetching vehicles:', err);\n      }\n    };\n    fetchVehicles();\n  }, []);\n\n  // Initialize MQTT client\n  useEffect(() => {\n    const client = mqtt.connect('ws://localhost:1883'); // Use WebSocket connection\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('gps/location');\n    });\n    client.on('message', (topic, message) => {\n      try {\n        const locationData = JSON.parse(message.toString());\n        updateVehicleLocation(locationData);\n      } catch (err) {\n        console.error('Error processing MQTT message:', err);\n      }\n    });\n    return () => {\n      client.end();\n    };\n  }, []);\n\n  // Initialize map\n  useEffect(() => {\n    const jakartaCoords = [-6.2088, 106.8456];\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstance.current = map;\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; OpenStreetMap contributors &copy; CARTO',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n    return () => {\n      map.remove();\n    };\n  }, []);\n\n  // Update vehicle location on map\n  const updateVehicleLocation = locationData => {\n    if (!mapInstance.current) return;\n    const {\n      device_id,\n      latitude,\n      longitude\n    } = locationData;\n    const vehicle = vehicles.find(v => v.device_id === device_id);\n    if (!vehicle) return; // Only show registered vehicles\n\n    if (markers[device_id]) {\n      markers[device_id].setLatLng([latitude, longitude]);\n    } else {\n      const marker = L.marker([latitude, longitude]).bindPopup(`\n          <b>${vehicle.device_name}</b><br>\n          ID: ${vehicle.device_id}<br>\n          Reg No: ${vehicle.reg_no}\n        `).addTo(mapInstance.current);\n      setMarkers(prev => ({\n        ...prev,\n        [device_id]: marker\n      }));\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 10\n    }\n  });\n}\nexport default Map;","map":{"version":3,"names":["React","useEffect","useRef","useState","L","turf","axios","mqtt","Map","mapRef","vehicles","setVehicles","markers","setMarkers","mapInstance","fetchVehicles","response","get","data","err","console","error","client","connect","on","log","subscribe","topic","message","locationData","JSON","parse","toString","updateVehicleLocation","end","jakartaCoords","map","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","control","position","remove","device_id","latitude","longitude","vehicle","find","v","setLatLng","marker","bindPopup","device_name","reg_no","prev","createElement","ref","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const [vehicles, setVehicles] = useState([]);\n  const [markers, setMarkers] = useState({});\n  const mapInstance = useRef(null);\n\n  // Fetch registered vehicles\n  useEffect(() => {\n    const fetchVehicles = async () => {\n      try {\n        const response = await axios.get('http://localhost:3013/api/devices');\n        setVehicles(response.data.data);\n      } catch (err) {\n        console.error('Error fetching vehicles:', err);\n      }\n    };\n    fetchVehicles();\n  }, []);\n\n  // Initialize MQTT client\n  useEffect(() => {\n    const client = mqtt.connect('ws://localhost:1883'); // Use WebSocket connection\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('gps/location');\n    });\n\n    client.on('message', (topic, message) => {\n      try {\n        const locationData = JSON.parse(message.toString());\n        updateVehicleLocation(locationData);\n      } catch (err) {\n        console.error('Error processing MQTT message:', err);\n      }\n    });\n\n    return () => {\n      client.end();\n    };\n  }, []);\n\n  // Initialize map\n  useEffect(() => {\n    const jakartaCoords = [-6.2088, 106.8456];\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstance.current = map;\n\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; OpenStreetMap contributors &copy; CARTO',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    return () => {\n      map.remove();\n    };\n  }, []);\n\n  // Update vehicle location on map\n  const updateVehicleLocation = (locationData) => {\n    if (!mapInstance.current) return;\n\n    const { device_id, latitude, longitude } = locationData;\n    const vehicle = vehicles.find(v => v.device_id === device_id);\n\n    if (!vehicle) return; // Only show registered vehicles\n\n    if (markers[device_id]) {\n      markers[device_id].setLatLng([latitude, longitude]);\n    } else {\n      const marker = L.marker([latitude, longitude])\n        .bindPopup(`\n          <b>${vehicle.device_name}</b><br>\n          ID: ${vehicle.device_id}<br>\n          Reg No: ${vehicle.reg_no}\n        `)\n        .addTo(mapInstance.current);\n      \n      setMarkers(prev => ({\n        ...prev,\n        [device_id]: marker\n      }));\n    }\n  };\n\n  return <div ref={mapRef} className=\"map-container\" />;\n}\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}