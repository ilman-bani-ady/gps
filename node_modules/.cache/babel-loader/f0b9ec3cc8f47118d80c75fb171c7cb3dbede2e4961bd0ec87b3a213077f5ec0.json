{"ast":null,"code":"const mqtt = require('mqtt');\n\n// MQTT Configuration\nconst MQTT_BROKER = 'mqtt://localhost:1883';\nconst MQTT_TOPIC = 'gps/location';\n\n// Create MQTT client\nconst client = mqtt.connect(MQTT_BROKER);\n\n// Handle connection\nclient.on('connect', () => {\n  console.log('Connected to MQTT broker');\n  console.log(`Subscribing to topic: ${MQTT_TOPIC}`);\n  client.subscribe(MQTT_TOPIC, err => {\n    if (err) {\n      console.error('Subscription error:', err);\n    } else {\n      console.log('Subscribed successfully\\n');\n      console.log('Waiting for messages...\\n');\n    }\n  });\n});\n\n// Handle incoming messages\nclient.on('message', (topic, message) => {\n  try {\n    const data = JSON.parse(message.toString());\n    const timestamp = new Date(data.timestamp * 1000).toLocaleString();\n    console.log('─'.repeat(50));\n    console.log('New Location Update:');\n    console.log('─'.repeat(50));\n    console.log(`Time: ${timestamp}`);\n    console.log(`Latitude: ${data.latitude.toFixed(6)}`);\n    console.log(`Longitude: ${data.longitude.toFixed(6)}`);\n    console.log('─'.repeat(50), '\\n');\n  } catch (error) {\n    console.error('Error processing message:', error);\n  }\n});\n\n// Handle errors\nclient.on('error', error => {\n  console.error('MQTT Error:', error);\n});\n\n// Handle disconnection\nclient.on('close', () => {\n  console.log('Disconnected from MQTT broker');\n});\n\n// Handle process termination\nprocess.on('SIGINT', () => {\n  console.log('\\nClosing MQTT connection...');\n  client.end();\n  process.exit();\n});","map":{"version":3,"names":["mqtt","require","MQTT_BROKER","MQTT_TOPIC","client","connect","on","console","log","subscribe","err","error","topic","message","data","JSON","parse","toString","timestamp","Date","toLocaleString","repeat","latitude","toFixed","longitude","process","end","exit"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["const mqtt = require('mqtt');\n\n// MQTT Configuration\nconst MQTT_BROKER = 'mqtt://localhost:1883';\nconst MQTT_TOPIC = 'gps/location';\n\n// Create MQTT client\nconst client = mqtt.connect(MQTT_BROKER);\n\n// Handle connection\nclient.on('connect', () => {\n    console.log('Connected to MQTT broker');\n    console.log(`Subscribing to topic: ${MQTT_TOPIC}`);\n    \n    client.subscribe(MQTT_TOPIC, (err) => {\n        if (err) {\n            console.error('Subscription error:', err);\n        } else {\n            console.log('Subscribed successfully\\n');\n            console.log('Waiting for messages...\\n');\n        }\n    });\n});\n\n// Handle incoming messages\nclient.on('message', (topic, message) => {\n    try {\n        const data = JSON.parse(message.toString());\n        const timestamp = new Date(data.timestamp * 1000).toLocaleString();\n        \n        console.log('─'.repeat(50));\n        console.log('New Location Update:');\n        console.log('─'.repeat(50));\n        console.log(`Time: ${timestamp}`);\n        console.log(`Latitude: ${data.latitude.toFixed(6)}`);\n        console.log(`Longitude: ${data.longitude.toFixed(6)}`);\n        console.log('─'.repeat(50), '\\n');\n    } catch (error) {\n        console.error('Error processing message:', error);\n    }\n});\n\n// Handle errors\nclient.on('error', (error) => {\n    console.error('MQTT Error:', error);\n});\n\n// Handle disconnection\nclient.on('close', () => {\n    console.log('Disconnected from MQTT broker');\n});\n\n// Handle process termination\nprocess.on('SIGINT', () => {\n    console.log('\\nClosing MQTT connection...');\n    client.end();\n    process.exit();\n});\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA,MAAMC,WAAW,GAAG,uBAAuB;AAC3C,MAAMC,UAAU,GAAG,cAAc;;AAEjC;AACA,MAAMC,MAAM,GAAGJ,IAAI,CAACK,OAAO,CAACH,WAAW,CAAC;;AAExC;AACAE,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;EACvBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EACvCD,OAAO,CAACC,GAAG,CAAC,yBAAyBL,UAAU,EAAE,CAAC;EAElDC,MAAM,CAACK,SAAS,CAACN,UAAU,EAAGO,GAAG,IAAK;IAClC,IAAIA,GAAG,EAAE;MACLH,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAAC;IAC7C,CAAC,MAAM;MACHH,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxCD,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAC5C;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACAJ,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,CAACM,KAAK,EAAEC,OAAO,KAAK;EACrC,IAAI;IACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;IAC3C,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACL,IAAI,CAACI,SAAS,GAAG,IAAI,CAAC,CAACE,cAAc,CAAC,CAAC;IAElEb,OAAO,CAACC,GAAG,CAAC,GAAG,CAACa,MAAM,CAAC,EAAE,CAAC,CAAC;IAC3Bd,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCD,OAAO,CAACC,GAAG,CAAC,GAAG,CAACa,MAAM,CAAC,EAAE,CAAC,CAAC;IAC3Bd,OAAO,CAACC,GAAG,CAAC,SAASU,SAAS,EAAE,CAAC;IACjCX,OAAO,CAACC,GAAG,CAAC,aAAaM,IAAI,CAACQ,QAAQ,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;IACpDhB,OAAO,CAACC,GAAG,CAAC,cAAcM,IAAI,CAACU,SAAS,CAACD,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;IACtDhB,OAAO,CAACC,GAAG,CAAC,GAAG,CAACa,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;EACrC,CAAC,CAAC,OAAOV,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACrD;AACJ,CAAC,CAAC;;AAEF;AACAP,MAAM,CAACE,EAAE,CAAC,OAAO,EAAGK,KAAK,IAAK;EAC1BJ,OAAO,CAACI,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;AACvC,CAAC,CAAC;;AAEF;AACAP,MAAM,CAACE,EAAE,CAAC,OAAO,EAAE,MAAM;EACrBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;AAChD,CAAC,CAAC;;AAEF;AACAiB,OAAO,CAACnB,EAAE,CAAC,QAAQ,EAAE,MAAM;EACvBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC3CJ,MAAM,CAACsB,GAAG,CAAC,CAAC;EACZD,OAAO,CAACE,IAAI,CAAC,CAAC;AAClB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}