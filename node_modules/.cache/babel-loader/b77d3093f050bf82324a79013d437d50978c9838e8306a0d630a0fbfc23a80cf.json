{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [marker, setMarker] = useState(null);\n  const [lastPosition, setLastPosition] = useState([-6.2088, 106.8456]); // Jakarta coordinates\n\n  useEffect(() => {\n    // Initialize map\n    const mapInstance = L.map(mapRef.current).setView(lastPosition, 13);\n\n    // Add dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; OpenStreetMap contributors &copy; CARTO',\n      maxZoom: 19\n    }).addTo(mapInstance);\n\n    // Create marker\n    const markerInstance = L.marker(lastPosition).addTo(mapInstance);\n    setMap(mapInstance);\n    setMarker(markerInstance);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect('ws://localhost:9001'); // WebSocket connection\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('gps/location');\n    });\n    client.on('message', (topic, message) => {\n      try {\n        const locationData = JSON.parse(message.toString());\n        const newPosition = [locationData.latitude, locationData.longitude];\n        console.log('Received new position:', newPosition);\n\n        // Update marker position\n        if (markerInstance) {\n          markerInstance.setLatLng(newPosition);\n        }\n\n        // Update map view to follow marker\n        mapInstance.setView(newPosition);\n\n        // Update last known position\n        setLastPosition(newPosition);\n      } catch (error) {\n        console.error('Error processing MQTT message:', error);\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      client.end();\n      mapInstance.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      height: '100vh',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"eTFCNJoX4kwe/rbIu36RD4rbpOU=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","mqtt","jsxDEV","_jsxDEV","Map","_s","mapRef","map","setMap","marker","setMarker","lastPosition","setLastPosition","mapInstance","current","setView","tileLayer","attribution","maxZoom","addTo","markerInstance","client","connect","on","console","log","subscribe","topic","message","locationData","JSON","parse","toString","newPosition","latitude","longitude","setLatLng","error","end","remove","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [marker, setMarker] = useState(null);\n  const [lastPosition, setLastPosition] = useState([-6.2088, 106.8456]); // Jakarta coordinates\n\n  useEffect(() => {\n    // Initialize map\n    const mapInstance = L.map(mapRef.current).setView(lastPosition, 13);\n    \n    // Add dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; OpenStreetMap contributors &copy; CARTO',\n      maxZoom: 19\n    }).addTo(mapInstance);\n\n    // Create marker\n    const markerInstance = L.marker(lastPosition).addTo(mapInstance);\n    \n    setMap(mapInstance);\n    setMarker(markerInstance);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect('ws://localhost:9001'); // WebSocket connection\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('gps/location');\n    });\n\n    client.on('message', (topic, message) => {\n      try {\n        const locationData = JSON.parse(message.toString());\n        const newPosition = [locationData.latitude, locationData.longitude];\n        \n        console.log('Received new position:', newPosition);\n        \n        // Update marker position\n        if (markerInstance) {\n          markerInstance.setLatLng(newPosition);\n        }\n        \n        // Update map view to follow marker\n        mapInstance.setView(newPosition);\n        \n        // Update last known position\n        setLastPosition(newPosition);\n        \n      } catch (error) {\n        console.error('Error processing MQTT message:', error);\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      client.end();\n      mapInstance.remove();\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mapRef} \n      style={{ height: '100vh', width: '100%' }}\n    />\n  );\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}