{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const [location, setLocation] = useState({\n    latitude: -6.2088,\n    longitude: 106.8456\n  }); // Initial Jakarta coordinates\n\n  useEffect(() => {\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10; // 10 km radius\n    const options = {\n      steps: 64,\n      units: 'kilometers'\n    };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert Turf circle to Leaflet layer and add to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n\n    // Add a marker for Jakarta city center\n    const marker = L.marker(jakartaCoords).addTo(map).bindPopup('Jakarta City Center').openPopup();\n    markerRef.current = marker; // Store marker reference\n\n    // MQTT setup\n    const client = mqtt.connect('mqtt://localhost:1883'); // Connect using TCP\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT Broker');\n      client.subscribe('gps/location', err => {\n        if (err) console.error('Subscription error:', err);\n      });\n    });\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      setLocation({\n        latitude: data.latitude,\n        longitude: data.longitude\n      }); // Update location state with new coordinates\n    });\n\n    // Cleanup function\n    return () => {\n      map.remove();\n      client.end();\n    };\n  }, []);\n\n  // Smoothly move the marker to the new location\n  const moveMarker = newLocation => {\n    if (markerRef.current) {\n      const latLng = L.latLng(newLocation.latitude, newLocation.longitude);\n      const startLatLng = markerRef.current.getLatLng();\n\n      // Calculate distance and step details for smooth movement\n      const distance = map.distance(startLatLng, latLng);\n      const duration = 1000; // Duration of the move in milliseconds\n      const stepTime = 50; // Time per step in milliseconds\n      const steps = Math.floor(duration / stepTime);\n      const stepLat = (latLng.lat - startLatLng.lat) / steps;\n      const stepLng = (latLng.lng - startLatLng.lng) / steps;\n      let stepCount = 0;\n      const move = () => {\n        if (stepCount < steps) {\n          const newLat = startLatLng.lat + stepLat * stepCount;\n          const newLng = startLatLng.lng + stepLng * stepCount;\n          markerRef.current.setLatLng([newLat, newLng]);\n          stepCount++;\n          requestAnimationFrame(move); // Request the next frame\n        } else {\n          // Ensure marker ends at the exact new location\n          markerRef.current.setLatLng(latLng);\n          markerRef.current.bindPopup(`Location updated: [${newLocation.latitude}, ${newLocation.longitude}]`).openPopup();\n        }\n      };\n      move();\n    }\n  };\n  useEffect(() => {\n    // Update marker location when `location` state changes\n    if (location) {\n      moveMarker(location);\n    }\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 10\n  }, this);\n}\n_s(Map, \"AnHL7W5zrbqBvT0mo/HpGKBIZWA=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","turf","mqtt","jsxDEV","_jsxDEV","Map","_s","mapRef","markerRef","location","setLocation","latitude","longitude","jakartaCoords","map","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","point","radius","options","steps","units","circle","geoJSON","style","color","weight","opacity","fillOpacity","marker","bindPopup","openPopup","client","connect","on","console","log","subscribe","err","error","topic","message","data","JSON","parse","toString","remove","end","moveMarker","newLocation","latLng","startLatLng","getLatLng","distance","duration","stepTime","Math","floor","stepLat","lat","stepLng","lng","stepCount","move","newLat","newLng","setLatLng","requestAnimationFrame","ref","className","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const [location, setLocation] = useState({ latitude: -6.2088, longitude: 106.8456 }); // Initial Jakarta coordinates\n\n  useEffect(() => {\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false,\n    });\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20,\n    }).addTo(map);\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10; // 10 km radius\n    const options = { steps: 64, units: 'kilometers' };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert Turf circle to Leaflet layer and add to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1,\n      },\n    }).addTo(map);\n\n    // Add a marker for Jakarta city center\n    const marker = L.marker(jakartaCoords).addTo(map)\n      .bindPopup('Jakarta City Center')\n      .openPopup();\n\n    markerRef.current = marker;  // Store marker reference\n\n    // MQTT setup\n    const client = mqtt.connect('mqtt://localhost:1883'); // Connect using TCP\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT Broker');\n      client.subscribe('gps/location', (err) => {\n        if (err) console.error('Subscription error:', err);\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      setLocation({ latitude: data.latitude, longitude: data.longitude });  // Update location state with new coordinates\n    });\n\n    // Cleanup function\n    return () => {\n      map.remove();\n      client.end();\n    };\n  }, []);\n\n  // Smoothly move the marker to the new location\n  const moveMarker = (newLocation) => {\n    if (markerRef.current) {\n      const latLng = L.latLng(newLocation.latitude, newLocation.longitude);\n      const startLatLng = markerRef.current.getLatLng();\n      \n      // Calculate distance and step details for smooth movement\n      const distance = map.distance(startLatLng, latLng);\n      const duration = 1000; // Duration of the move in milliseconds\n      const stepTime = 50; // Time per step in milliseconds\n      const steps = Math.floor(duration / stepTime);\n      const stepLat = (latLng.lat - startLatLng.lat) / steps;\n      const stepLng = (latLng.lng - startLatLng.lng) / steps;\n\n      let stepCount = 0;\n\n      const move = () => {\n        if (stepCount < steps) {\n          const newLat = startLatLng.lat + stepLat * stepCount;\n          const newLng = startLatLng.lng + stepLng * stepCount;\n          markerRef.current.setLatLng([newLat, newLng]);\n          stepCount++;\n          requestAnimationFrame(move); // Request the next frame\n        } else {\n          // Ensure marker ends at the exact new location\n          markerRef.current.setLatLng(latLng);\n          markerRef.current.bindPopup(`Location updated: [${newLocation.latitude}, ${newLocation.longitude}]`).openPopup();\n        }\n      };\n      move();\n    }\n  };\n\n  useEffect(() => {\n    // Update marker location when `location` state changes\n    if (location) {\n      moveMarker(location);\n    }\n  }, [location]);\n\n  return <div ref={mapRef} className=\"map-container\" style={{ height: '100vh' }} />;\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}