{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport mqtt from 'mqtt';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const currentMarkerRef = useRef(null);\n  const initialMarkerRef = useRef(null);\n  const polylineRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const initialCoordsRef = useRef(null);\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.remove();\n    }\n\n    // Initialize the map with a default center (will be updated with first MQTT message)\n    const map = L.map(mapRef.current, {\n      center: [0, 0],\n      // Default center\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstanceRef.current = map;\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create custom icons\n    const initialIcon = L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div style='background-color: #4A90E2; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;'></div>`,\n      iconSize: [15, 15],\n      iconAnchor: [7, 7]\n    });\n    const currentIcon = L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div style='background-color: #FF4444; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;'></div>`,\n      iconSize: [15, 15],\n      iconAnchor: [7, 7]\n    });\n\n    // Initialize polyline\n    const polyline = L.polyline([], {\n      color: '#FF4444',\n      weight: 2,\n      opacity: 0.7,\n      dashArray: '5, 10'\n    }).addTo(map);\n    polylineRef.current = polyline;\n\n    // MQTT Connection\n    const client = mqtt.connect('mqtt://broker.hivemq.com:1883');\n    const MQTT_TOPIC = 'gps/location';\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n\n          // If this is the first position received, set it as initial position\n          if (!initialCoordsRef.current) {\n            initialCoordsRef.current = newPosition;\n\n            // Add initial marker\n            const initialMarker = L.marker(newPosition, {\n              icon: initialIcon\n            }).addTo(map);\n            initialMarker.bindPopup('Initial Position').openPopup();\n            initialMarkerRef.current = initialMarker;\n\n            // Create circle around initial position\n            const center = turf.point([locationData.longitude, locationData.latitude]);\n            const radius = 10;\n            const options = {\n              steps: 64,\n              units: 'kilometers'\n            };\n            const circle = turf.circle(center, radius, options);\n            L.geoJSON(circle, {\n              style: {\n                color: '#ffffff',\n                weight: 2,\n                opacity: 0.7,\n                fillOpacity: 0.1\n              }\n            }).addTo(map);\n\n            // Center map on initial position\n            map.setView(newPosition, 11);\n          }\n\n          // Update current position marker\n          if (currentMarkerRef.current) {\n            currentMarkerRef.current.remove();\n          }\n          const newMarker = L.marker(newPosition, {\n            icon: currentIcon\n          }).addTo(map);\n          newMarker.bindPopup(`Current Position<br>Lat: ${locationData.latitude}<br>Lng: ${locationData.longitude}`).openPopup();\n          currentMarkerRef.current = newMarker;\n\n          // Update polyline if we have initial coordinates\n          if (initialCoordsRef.current) {\n            polylineRef.current.setLatLngs([initialCoordsRef.current, newPosition]);\n\n            // Fit bounds to show both markers\n            const bounds = L.latLngBounds([initialCoordsRef.current, newPosition]);\n            map.fitBounds(bounds, {\n              padding: [50, 50]\n            });\n          }\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n      if (currentMarkerRef.current) {\n        currentMarkerRef.current = null;\n      }\n      if (initialMarkerRef.current) {\n        initialMarkerRef.current = null;\n      }\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: '100vh',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"Jca+I26y63drb1CSIuQrPxjgWKA=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","L","turf","mqtt","jsxDEV","_jsxDEV","Map","_s","mapRef","currentMarkerRef","initialMarkerRef","polylineRef","mapInstanceRef","initialCoordsRef","current","remove","map","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","initialIcon","divIcon","className","html","iconSize","iconAnchor","currentIcon","polyline","color","weight","opacity","dashArray","client","connect","MQTT_TOPIC","on","console","log","subscribe","topic","message","locationData","JSON","parse","toString","newPosition","latitude","longitude","initialMarker","marker","icon","bindPopup","openPopup","point","radius","options","steps","units","circle","geoJSON","style","fillOpacity","setView","newMarker","setLatLngs","bounds","latLngBounds","fitBounds","padding","error","control","position","end","ref","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport mqtt from 'mqtt';\nimport 'leaflet/dist/leaflet.css';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const currentMarkerRef = useRef(null);\n  const initialMarkerRef = useRef(null);\n  const polylineRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const initialCoordsRef = useRef(null);\n\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.remove();\n    }\n\n    // Initialize the map with a default center (will be updated with first MQTT message)\n    const map = L.map(mapRef.current, {\n      center: [0, 0],  // Default center\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstanceRef.current = map;\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create custom icons\n    const initialIcon = L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div style='background-color: #4A90E2; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;'></div>`,\n      iconSize: [15, 15],\n      iconAnchor: [7, 7]\n    });\n\n    const currentIcon = L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div style='background-color: #FF4444; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;'></div>`,\n      iconSize: [15, 15],\n      iconAnchor: [7, 7]\n    });\n\n    // Initialize polyline\n    const polyline = L.polyline([], {\n      color: '#FF4444',\n      weight: 2,\n      opacity: 0.7,\n      dashArray: '5, 10'\n    }).addTo(map);\n    polylineRef.current = polyline;\n\n    // MQTT Connection\n    const client = mqtt.connect('mqtt://broker.hivemq.com:1883');\n    const MQTT_TOPIC = 'gps/location';\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n\n          // If this is the first position received, set it as initial position\n          if (!initialCoordsRef.current) {\n            initialCoordsRef.current = newPosition;\n            \n            // Add initial marker\n            const initialMarker = L.marker(newPosition, { icon: initialIcon }).addTo(map);\n            initialMarker.bindPopup('Initial Position').openPopup();\n            initialMarkerRef.current = initialMarker;\n\n            // Create circle around initial position\n            const center = turf.point([locationData.longitude, locationData.latitude]);\n            const radius = 10;\n            const options = { steps: 64, units: 'kilometers' };\n            const circle = turf.circle(center, radius, options);\n\n            L.geoJSON(circle, {\n              style: {\n                color: '#ffffff',\n                weight: 2,\n                opacity: 0.7,\n                fillOpacity: 0.1\n              }\n            }).addTo(map);\n\n            // Center map on initial position\n            map.setView(newPosition, 11);\n          }\n          \n          // Update current position marker\n          if (currentMarkerRef.current) {\n            currentMarkerRef.current.remove();\n          }\n\n          const newMarker = L.marker(newPosition, { icon: currentIcon }).addTo(map);\n          newMarker.bindPopup(`Current Position<br>Lat: ${locationData.latitude}<br>Lng: ${locationData.longitude}`).openPopup();\n          currentMarkerRef.current = newMarker;\n\n          // Update polyline if we have initial coordinates\n          if (initialCoordsRef.current) {\n            polylineRef.current.setLatLngs([initialCoordsRef.current, newPosition]);\n            \n            // Fit bounds to show both markers\n            const bounds = L.latLngBounds([initialCoordsRef.current, newPosition]);\n            map.fitBounds(bounds, { padding: [50, 50] });\n          }\n\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n      if (currentMarkerRef.current) {\n        currentMarkerRef.current = null;\n      }\n      if (initialMarkerRef.current) {\n        initialMarkerRef.current = null;\n      }\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mapRef} \n      className=\"map-container\" \n      style={{ height: '100vh', width: '100%' }} \n    />\n  );\n}\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}