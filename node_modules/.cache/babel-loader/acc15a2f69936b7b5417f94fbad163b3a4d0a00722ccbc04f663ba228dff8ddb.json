{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\n//////////////////////////\n\n// MQTT Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MQTT_BROKER = 'mqtt://localhost:1883';\nconst MQTT_TOPIC = 'gps/location';\n\n// Create MQTT client\nconst client = mqtt.connect(MQTT_BROKER);\n\n// Handle connection\nclient.on('connect', () => {\n  console.log('Connected to MQTT broker');\n  console.log(`Subscribing to topic: ${MQTT_TOPIC}`);\n  client.subscribe(MQTT_TOPIC, err => {\n    if (err) {\n      console.error('Subscription error:', err);\n    } else {\n      console.log('Subscribed successfully\\n');\n      console.log('Waiting for messages...\\n');\n    }\n  });\n});\n\n// Handle incoming messages\nclient.on('message', (topic, message) => {\n  try {\n    const data = JSON.parse(message.toString());\n    const timestamp = new Date(data.timestamp * 1000).toLocaleString();\n    console.log('─'.repeat(50));\n    console.log('New Location Update:');\n    console.log('─'.repeat(50));\n    console.log(`Time: ${timestamp}`);\n    console.log(`Latitude: ${data.latitude.toFixed(6)}`);\n    console.log(`Longitude: ${data.longitude.toFixed(6)}`);\n    console.log('─'.repeat(50), '\\n');\n  } catch (error) {\n    console.error('Error processing message:', error);\n  }\n});\n\n// Handle errors\nclient.on('error', error => {\n  console.error('MQTT Error:', error);\n});\n\n// Handle disconnection\nclient.on('close', () => {\n  console.log('Disconnected from MQTT broker');\n});\n\n// Handle process termination\nprocess.on('SIGINT', () => {\n  console.log('\\nClosing MQTT connection...');\n  client.end();\n  process.exit();\n});\n\n/////////////////////////\n\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const [marker, setMarker] = useState(null);\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const mapInstance = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    setMap(mapInstance);\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(mapInstance);\n\n    // Initialize marker\n    const initialMarker = L.marker(jakartaCoords).addTo(mapInstance);\n    setMarker(initialMarker);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect('ws://localhost:9001');\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n\n          // Update marker position\n          if (marker) {\n            marker.setLatLng(newPosition);\n          }\n\n          // Optional: Center map on new position\n          mapInstance.setView(newPosition);\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(mapInstance);\n\n    // Cleanup function\n    return () => {\n      client.end();\n      mapInstance.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 10\n  }, this);\n}\n_s(Map, \"3HmR5bwEwcRmVtLfVGJu2iy3tzI=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","turf","mqtt","jsxDEV","_jsxDEV","MQTT_BROKER","MQTT_TOPIC","client","connect","on","console","log","subscribe","err","error","topic","message","data","JSON","parse","toString","timestamp","Date","toLocaleString","repeat","latitude","toFixed","longitude","process","end","exit","Map","_s","mapRef","marker","setMarker","map","setMap","jakartaCoords","mapInstance","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","initialMarker","locationData","newPosition","setLatLng","setView","control","position","remove","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\n\n//////////////////////////\n\n// MQTT Configuration\nconst MQTT_BROKER = 'mqtt://localhost:1883';\nconst MQTT_TOPIC = 'gps/location';\n\n// Create MQTT client\nconst client = mqtt.connect(MQTT_BROKER);\n\n\n// Handle connection\nclient.on('connect', () => {\n    console.log('Connected to MQTT broker');\n    console.log(`Subscribing to topic: ${MQTT_TOPIC}`);\n    \n    client.subscribe(MQTT_TOPIC, (err) => {\n        if (err) {\n            console.error('Subscription error:', err);\n        } else {\n            console.log('Subscribed successfully\\n');\n            console.log('Waiting for messages...\\n');\n        }\n    });\n});\n\n// Handle incoming messages\nclient.on('message', (topic, message) => {\n    try {\n        const data = JSON.parse(message.toString());\n        const timestamp = new Date(data.timestamp * 1000).toLocaleString();\n        \n        console.log('─'.repeat(50));\n        console.log('New Location Update:');\n        console.log('─'.repeat(50));\n        console.log(`Time: ${timestamp}`);\n        console.log(`Latitude: ${data.latitude.toFixed(6)}`);\n        console.log(`Longitude: ${data.longitude.toFixed(6)}`);\n        console.log('─'.repeat(50), '\\n');\n    } catch (error) {\n        console.error('Error processing message:', error);\n    }\n});\n\n// Handle errors\nclient.on('error', (error) => {\n    console.error('MQTT Error:', error);\n});\n\n// Handle disconnection\nclient.on('close', () => {\n    console.log('Disconnected from MQTT broker');\n});\n\n// Handle process termination\nprocess.on('SIGINT', () => {\n    console.log('\\nClosing MQTT connection...');\n    client.end();\n    process.exit();\n});\n\n/////////////////////////\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const [marker, setMarker] = useState(null);\n  const [map, setMap] = useState(null);\n\n  useEffect(() => {\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const mapInstance = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    setMap(mapInstance);\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(mapInstance);\n\n    // Initialize marker\n    const initialMarker = L.marker(jakartaCoords).addTo(mapInstance);\n    setMarker(initialMarker);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect('ws://localhost:9001');\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n          \n          // Update marker position\n          if (marker) {\n            marker.setLatLng(newPosition);\n          }\n          \n          // Optional: Center map on new position\n          mapInstance.setView(newPosition);\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(mapInstance);\n\n    // Cleanup function\n    return () => {\n      client.end();\n      mapInstance.remove();\n    };\n  }, []);\n\n  return <div ref={mapRef} className=\"map-container\" />;\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}