{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport mqtt from 'mqtt';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  useEffect(() => {\n    // Cleanup previous map instance if it exists\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.remove();\n    }\n\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstanceRef.current = map;\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point([106.8456, -6.2088]); // Note: Turf uses [lng, lat]\n    const radius = 10; // 10 km radius\n    const options = {\n      steps: 64,\n      units: 'kilometers'\n    };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert Turf circle to Leaflet layer and add to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n\n    // Initialize marker and store in ref\n    const marker = L.marker(jakartaCoords).addTo(map);\n    markerRef.current = marker;\n\n    // MQTT Connection\n    const client = mqtt.connect('mqtt://broker.hivemq.com:1883');\n    const MQTT_TOPIC = 'gps/location';\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n\n          // Update marker position\n          if (markerRef.current) {\n            markerRef.current.setLatLng(newPosition);\n            map.setView(newPosition);\n            markerRef.current.bindPopup(`Lat: ${locationData.latitude}<br>Lng: ${locationData.longitude}`).openPopup();\n          }\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n      if (markerRef.current) {\n        markerRef.current = null;\n      }\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: '100vh',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"xQGXcahzFQifuHvcFMJcOQYrzUs=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","L","turf","mqtt","jsxDEV","_jsxDEV","Map","_s","mapRef","markerRef","mapInstanceRef","current","remove","jakartaCoords","map","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","point","radius","options","steps","units","circle","geoJSON","style","color","weight","opacity","fillOpacity","marker","client","connect","MQTT_TOPIC","on","console","log","subscribe","topic","message","locationData","JSON","parse","toString","newPosition","latitude","longitude","setLatLng","setView","bindPopup","openPopup","error","control","position","end","ref","className","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport mqtt from 'mqtt';\nimport 'leaflet/dist/leaflet.css';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n\n  useEffect(() => {\n    // Cleanup previous map instance if it exists\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.remove();\n    }\n\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstanceRef.current = map;\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point([106.8456, -6.2088]); // Note: Turf uses [lng, lat]\n    const radius = 10; // 10 km radius\n    const options = { steps: 64, units: 'kilometers' };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert Turf circle to Leaflet layer and add to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n\n    // Initialize marker and store in ref\n    const marker = L.marker(jakartaCoords).addTo(map);\n    markerRef.current = marker;\n\n    // MQTT Connection\n    const client = mqtt.connect('mqtt://broker.hivemq.com:1883');\n    const MQTT_TOPIC = 'gps/location';\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n          \n          // Update marker position\n          if (markerRef.current) {\n            markerRef.current.setLatLng(newPosition);\n            map.setView(newPosition);\n            markerRef.current.bindPopup(`Lat: ${locationData.latitude}<br>Lng: ${locationData.longitude}`).openPopup();\n          }\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n      if (markerRef.current) {\n        markerRef.current = null;\n      }\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mapRef} \n      className=\"map-container\" \n      style={{ height: '100vh', width: '100%' }} \n    />\n  );\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}