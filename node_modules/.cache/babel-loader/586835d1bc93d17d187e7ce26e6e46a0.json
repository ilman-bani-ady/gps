{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\";\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport * as mqtt from 'mqtt/dist/mqtt';\nimport 'leaflet/dist/leaflet.css';\nfunction Map() {\n  const mapRef = useRef(null); // Reference to the map container\n  const mapInstance = useRef(null); // Reference to the Leaflet map instance\n  const markersRef = useRef({}); // Reference to store markers by device ID\n\n  useEffect(() => {\n    // Coordinates for Jakarta as the center point\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the Leaflet map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstance.current = map;\n\n    // Add a tile layer for the map\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create a circle around Jakarta with a radius of 10 km using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10; // Radius in kilometers\n    const options = {\n      steps: 64,\n      units: 'kilometers'\n    };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert the Turf circle to a Leaflet layer and add it to the map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n\n    // Add a zoom control to the map\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // Establish MQTT connection\n    const client = mqtt.connect('mqtt://localhost:1883');\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('gps/location');\n    });\n\n    // Handle incoming MQTT messages\n    client.on('message', (topic, message) => {\n      try {\n        const locationData = JSON.parse(message.toString());\n        const {\n          device_id,\n          latitude,\n          longitude\n        } = locationData;\n\n        // Update marker if it already exists, or create a new one\n        if (markersRef.current[device_id]) {\n          markersRef.current[device_id].setLatLng([latitude, longitude]);\n        } else {\n          const marker = L.marker([latitude, longitude]).bindPopup(`Device ID: ${device_id}`).addTo(map);\n          markersRef.current[device_id] = marker;\n        }\n      } catch (err) {\n        console.error('Error processing MQTT message:', err);\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      map.remove(); // Remove the map instance\n      client.end(); // Disconnect the MQTT client\n    };\n  }, []);\n\n  // Render the map container\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: '100vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 10\n    }\n  });\n}\nexport default Map;","map":{"version":3,"names":["React","useEffect","useRef","L","turf","mqtt","Map","mapRef","mapInstance","markersRef","jakartaCoords","map","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","point","radius","options","steps","units","circle","geoJSON","style","color","weight","opacity","fillOpacity","control","position","client","connect","on","console","log","subscribe","topic","message","locationData","JSON","parse","toString","device_id","latitude","longitude","setLatLng","marker","bindPopup","err","error","remove","end","createElement","ref","className","height","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport * as mqtt from 'mqtt/dist/mqtt';\nimport 'leaflet/dist/leaflet.css';\n\nfunction Map() {\n  const mapRef = useRef(null); // Reference to the map container\n  const mapInstance = useRef(null); // Reference to the Leaflet map instance\n  const markersRef = useRef({}); // Reference to store markers by device ID\n\n  useEffect(() => {\n    // Coordinates for Jakarta as the center point\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the Leaflet map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false,\n    });\n    mapInstance.current = map;\n\n    // Add a tile layer for the map\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20,\n    }).addTo(map);\n\n    // Create a circle around Jakarta with a radius of 10 km using Turf.js\n    const center = turf.point(jakartaCoords);\n    const radius = 10; // Radius in kilometers\n    const options = { steps: 64, units: 'kilometers' };\n    const circle = turf.circle(center, radius, options);\n\n    // Convert the Turf circle to a Leaflet layer and add it to the map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1,\n      },\n    }).addTo(map);\n\n    // Add a zoom control to the map\n    L.control.zoom({\n      position: 'topright',\n    }).addTo(map);\n\n    // Establish MQTT connection\n    const client = mqtt.connect('mqtt://localhost:1883');\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('gps/location');\n    });\n\n    // Handle incoming MQTT messages\n    client.on('message', (topic, message) => {\n      try {\n        const locationData = JSON.parse(message.toString());\n        const { device_id, latitude, longitude } = locationData;\n\n        // Update marker if it already exists, or create a new one\n        if (markersRef.current[device_id]) {\n          markersRef.current[device_id].setLatLng([latitude, longitude]);\n        } else {\n          const marker = L.marker([latitude, longitude])\n            .bindPopup(`Device ID: ${device_id}`)\n            .addTo(map);\n          markersRef.current[device_id] = marker;\n        }\n      } catch (err) {\n        console.error('Error processing MQTT message:', err);\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      map.remove(); // Remove the map instance\n      client.end(); // Disconnect the MQTT client\n    };\n  }, []);\n\n  // Render the map container\n  return <div ref={mapRef} className=\"map-container\" style={{ height: '100vh' }} />;\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}