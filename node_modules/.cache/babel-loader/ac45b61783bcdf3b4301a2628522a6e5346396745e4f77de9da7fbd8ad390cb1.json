{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\n// MQTT Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MQTT_BROKER = 'ws://localhost:9001';\nconst MQTT_TOPIC = 'gps/location';\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [marker, setMarker] = useState(null);\n  const [locationHistory, setLocationHistory] = useState([]);\n  useEffect(() => {\n    // Jakarta center coordinates\n    const initialPosition = [-6.2088, 106.8456];\n\n    // Initialize map\n    const mapInstance = L.map(mapRef.current).setView(initialPosition, 12);\n\n    // Add dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; OpenStreetMap contributors &copy; CARTO',\n      maxZoom: 19\n    }).addTo(mapInstance);\n\n    // Create marker with custom popup\n    const markerInstance = L.marker(initialPosition).bindPopup('Current Location').addTo(mapInstance);\n    setMap(mapInstance);\n    setMarker(markerInstance);\n\n    // Connect to MQTT broker\n    console.log('Connecting to MQTT broker...');\n    const client = mqtt.connect(MQTT_BROKER);\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n      console.log(`Subscribed to topic: ${MQTT_TOPIC}`);\n    });\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          console.log('Received location:', locationData);\n          const newPosition = [locationData.latitude, locationData.longitude];\n\n          // Update marker position\n          if (markerInstance) {\n            markerInstance.setLatLng(newPosition);\n            markerInstance.setPopupContent(`\n              Lat: ${locationData.latitude.toFixed(4)}<br>\n              Lng: ${locationData.longitude.toFixed(4)}<br>\n              Time: ${new Date(locationData.timestamp * 1000).toLocaleTimeString()}\n            `);\n          }\n\n          // Update map view to follow marker\n          mapInstance.setView(newPosition);\n\n          // Update location history\n          setLocationHistory(prev => [...prev, newPosition]);\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      console.log('Cleaning up MQTT connection...');\n      client.end();\n      mapInstance.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        height: '80vh',\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '10px',\n        background: '#f5f5f5'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Location Updates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"MQTT Topic: \", MQTT_TOPIC]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), locationHistory.slice(-5).map((loc, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Lat: \", loc[0].toFixed(4), \", Lng: \", loc[1].toFixed(4)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"Hnpopa74L3hrexapO7hkNYvmWls=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","mqtt","jsxDEV","_jsxDEV","MQTT_BROKER","MQTT_TOPIC","Map","_s","mapRef","map","setMap","marker","setMarker","locationHistory","setLocationHistory","initialPosition","mapInstance","current","setView","tileLayer","attribution","maxZoom","addTo","markerInstance","bindPopup","console","log","client","connect","on","subscribe","topic","message","locationData","JSON","parse","toString","newPosition","latitude","longitude","setLatLng","setPopupContent","toFixed","Date","timestamp","toLocaleTimeString","prev","error","end","remove","children","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","padding","background","slice","loc","index","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\n// MQTT Configuration\nconst MQTT_BROKER = 'ws://localhost:9001';\nconst MQTT_TOPIC = 'gps/location';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [marker, setMarker] = useState(null);\n  const [locationHistory, setLocationHistory] = useState([]);\n\n  useEffect(() => {\n    // Jakarta center coordinates\n    const initialPosition = [-6.2088, 106.8456];\n\n    // Initialize map\n    const mapInstance = L.map(mapRef.current).setView(initialPosition, 12);\n    \n    // Add dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; OpenStreetMap contributors &copy; CARTO',\n      maxZoom: 19\n    }).addTo(mapInstance);\n\n    // Create marker with custom popup\n    const markerInstance = L.marker(initialPosition)\n      .bindPopup('Current Location')\n      .addTo(mapInstance);\n    \n    setMap(mapInstance);\n    setMarker(markerInstance);\n\n    // Connect to MQTT broker\n    console.log('Connecting to MQTT broker...');\n    const client = mqtt.connect(MQTT_BROKER);\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n      console.log(`Subscribed to topic: ${MQTT_TOPIC}`);\n    });\n\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          console.log('Received location:', locationData);\n\n          const newPosition = [locationData.latitude, locationData.longitude];\n          \n          // Update marker position\n          if (markerInstance) {\n            markerInstance.setLatLng(newPosition);\n            markerInstance.setPopupContent(`\n              Lat: ${locationData.latitude.toFixed(4)}<br>\n              Lng: ${locationData.longitude.toFixed(4)}<br>\n              Time: ${new Date(locationData.timestamp * 1000).toLocaleTimeString()}\n            `);\n          }\n          \n          // Update map view to follow marker\n          mapInstance.setView(newPosition);\n          \n          // Update location history\n          setLocationHistory(prev => [...prev, newPosition]);\n          \n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      console.log('Cleaning up MQTT connection...');\n      client.end();\n      mapInstance.remove();\n    };\n  }, []);\n\n  return (\n    <div>\n      <div \n        ref={mapRef} \n        style={{ height: '80vh', width: '100%' }}\n      />\n      <div style={{ padding: '10px', background: '#f5f5f5' }}>\n        <h3>Location Updates</h3>\n        <p>MQTT Topic: {MQTT_TOPIC}</p>\n        {locationHistory.slice(-5).map((loc, index) => (\n          <div key={index}>\n            Lat: {loc[0].toFixed(4)}, Lng: {loc[1].toFixed(4)}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}