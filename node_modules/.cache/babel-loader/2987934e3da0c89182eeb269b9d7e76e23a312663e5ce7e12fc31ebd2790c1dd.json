{"ast":null,"code":"const express = require('express');\nconst pool = require('./db');\nconst app = express();\napp.use(express.json());\n\n// API: Mendapatkan semua armada (vehicle)\napp.get('/vehicle', async (req, res) => {\n  try {\n    const {\n      rows\n    } = await pool.query('SELECT * FROM vehicle');\n    res.json(rows);\n  } catch (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  }\n});\n\n// API: Mendapatkan riwayat posisi bus tertentu berdasarkan vehicle_id\napp.get('/history/:vehicle_id', async (req, res) => {\n  const {\n    vehicle_id\n  } = req.params;\n  try {\n    const {\n      rows\n    } = await pool.query('SELECT * FROM history WHERE vehicle_id = $1 ORDER BY gpsdatetime DESC', [vehicle_id]);\n    res.json(rows);\n  } catch (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  }\n});\n\n// Konfigurasi IP dan Port\nconst PORT = process.env.PORT || 3001;\nconst HOST = process.env.HOST || '103.245.39.79';\n\n// Menjalankan server\napp.listen(PORT, HOST, () => {\n  console.log(`Server berjalan di http://${HOST}:${PORT}/vehicles`);\n});","map":{"version":3,"names":["express","require","pool","app","use","json","get","req","res","rows","query","error","status","message","vehicle_id","params","PORT","process","env","HOST","listen","console","log"],"sources":["/root/tesis/gps/src/services/api.js"],"sourcesContent":["const express = require('express');\nconst pool = require('./db');\nconst app = express();\n\napp.use(express.json());\n\n// API: Mendapatkan semua armada (vehicle)\napp.get('/vehicle', async (req, res) => {\n  try {\n    const { rows } = await pool.query('SELECT * FROM vehicle');\n    res.json(rows);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// API: Mendapatkan riwayat posisi bus tertentu berdasarkan vehicle_id\napp.get('/history/:vehicle_id', async (req, res) => {\n  const { vehicle_id } = req.params;\n  try {\n    const { rows } = await pool.query(\n      'SELECT * FROM history WHERE vehicle_id = $1 ORDER BY gpsdatetime DESC',\n      [vehicle_id]\n    );\n    res.json(rows);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Konfigurasi IP dan Port\nconst PORT = process.env.PORT || 3001;\nconst HOST = process.env.HOST || '103.245.39.79';\n\n// Menjalankan server\napp.listen(PORT, HOST, () => {\n  console.log(`Server berjalan di http://${HOST}:${PORT}/vehicles`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AAErBG,GAAG,CAACC,GAAG,CAACJ,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAF,GAAG,CAACG,GAAG,CAAC,UAAU,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtC,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMP,IAAI,CAACQ,KAAK,CAAC,uBAAuB,CAAC;IAC1DF,GAAG,CAACH,IAAI,CAACI,IAAI,CAAC;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;MAAEM,KAAK,EAAEA,KAAK,CAACE;IAAQ,CAAC,CAAC;EAChD;AACF,CAAC,CAAC;;AAEF;AACAV,GAAG,CAACG,GAAG,CAAC,sBAAsB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAClD,MAAM;IAAEM;EAAW,CAAC,GAAGP,GAAG,CAACQ,MAAM;EACjC,IAAI;IACF,MAAM;MAAEN;IAAK,CAAC,GAAG,MAAMP,IAAI,CAACQ,KAAK,CAC/B,uEAAuE,EACvE,CAACI,UAAU,CACb,CAAC;IACDN,GAAG,CAACH,IAAI,CAACI,IAAI,CAAC;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;MAAEM,KAAK,EAAEA,KAAK,CAACE;IAAQ,CAAC,CAAC;EAChD;AACF,CAAC,CAAC;;AAEF;AACA,MAAMG,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrC,MAAMG,IAAI,GAAGF,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,eAAe;;AAEhD;AACAhB,GAAG,CAACiB,MAAM,CAACJ,IAAI,EAAEG,IAAI,EAAE,MAAM;EAC3BE,OAAO,CAACC,GAAG,CAAC,6BAA6BH,IAAI,IAAIH,IAAI,WAAW,CAAC;AACnE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}