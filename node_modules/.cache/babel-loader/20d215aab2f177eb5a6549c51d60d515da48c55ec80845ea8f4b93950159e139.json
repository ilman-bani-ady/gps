{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport mqtt from 'mqtt';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const currentMarkerRef = useRef(null);\n  const initialMarkerRef = useRef(null);\n  const polylineRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.remove();\n    }\n\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstanceRef.current = map;\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create custom icons\n    const initialIcon = L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div style='background-color: #4A90E2; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;'></div>`,\n      iconSize: [15, 15],\n      iconAnchor: [7, 7]\n    });\n    const currentIcon = L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div style='background-color: #FF4444; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;'></div>`,\n      iconSize: [15, 15],\n      iconAnchor: [7, 7]\n    });\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point([106.8456, -6.2088]);\n    const radius = 10;\n    const options = {\n      steps: 64,\n      units: 'kilometers'\n    };\n    const circle = turf.circle(center, radius, options);\n\n    // Add circle to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n\n    // Add initial position marker\n    const initialMarker = L.marker(jakartaCoords, {\n      icon: initialIcon\n    }).addTo(map);\n    initialMarker.bindPopup('Initial Position').openPopup();\n    initialMarkerRef.current = initialMarker;\n\n    // Initialize polyline\n    const polyline = L.polyline([], {\n      color: '#FF4444',\n      weight: 2,\n      opacity: 0.7,\n      dashArray: '5, 10'\n    }).addTo(map);\n    polylineRef.current = polyline;\n\n    // MQTT Connection\n    const client = mqtt.connect('mqtt://broker.hivemq.com:1883');\n    const MQTT_TOPIC = 'gps/location';\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n\n          // Remove old current marker if it exists\n          if (currentMarkerRef.current) {\n            currentMarkerRef.current.remove();\n          }\n\n          // Add new marker\n          const newMarker = L.marker(newPosition, {\n            icon: currentIcon\n          }).addTo(map);\n          newMarker.bindPopup(`Current Position<br>Lat: ${locationData.latitude}<br>Lng: ${locationData.longitude}`).openPopup();\n          currentMarkerRef.current = newMarker;\n\n          // Update polyline\n          polylineRef.current.setLatLngs([jakartaCoords, newPosition]);\n\n          // Fit bounds to show both markers\n          const bounds = L.latLngBounds([jakartaCoords, newPosition]);\n          map.fitBounds(bounds, {\n            padding: [50, 50]\n          });\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n      if (currentMarkerRef.current) {\n        currentMarkerRef.current = null;\n      }\n      if (initialMarkerRef.current) {\n        initialMarkerRef.current = null;\n      }\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      height: '100vh',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"xcgrPDwkxt9MBGh389HbRIbG+Oc=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","L","turf","mqtt","jsxDEV","_jsxDEV","Map","_s","mapRef","currentMarkerRef","initialMarkerRef","polylineRef","mapInstanceRef","current","remove","jakartaCoords","map","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","initialIcon","divIcon","className","html","iconSize","iconAnchor","currentIcon","point","radius","options","steps","units","circle","geoJSON","style","color","weight","opacity","fillOpacity","initialMarker","marker","icon","bindPopup","openPopup","polyline","dashArray","client","connect","MQTT_TOPIC","on","console","log","subscribe","topic","message","locationData","JSON","parse","toString","newPosition","latitude","longitude","newMarker","setLatLngs","bounds","latLngBounds","fitBounds","padding","error","control","position","end","ref","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport mqtt from 'mqtt';\nimport 'leaflet/dist/leaflet.css';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const currentMarkerRef = useRef(null);\n  const initialMarkerRef = useRef(null);\n  const polylineRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.remove();\n    }\n\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const map = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    mapInstanceRef.current = map;\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(map);\n\n    // Create custom icons\n    const initialIcon = L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div style='background-color: #4A90E2; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;'></div>`,\n      iconSize: [15, 15],\n      iconAnchor: [7, 7]\n    });\n\n    const currentIcon = L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div style='background-color: #FF4444; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;'></div>`,\n      iconSize: [15, 15],\n      iconAnchor: [7, 7]\n    });\n\n    // Create a circle around Jakarta using Turf.js\n    const center = turf.point([106.8456, -6.2088]);\n    const radius = 10;\n    const options = { steps: 64, units: 'kilometers' };\n    const circle = turf.circle(center, radius, options);\n\n    // Add circle to map\n    L.geoJSON(circle, {\n      style: {\n        color: '#ffffff',\n        weight: 2,\n        opacity: 0.7,\n        fillOpacity: 0.1\n      }\n    }).addTo(map);\n\n    // Add initial position marker\n    const initialMarker = L.marker(jakartaCoords, { icon: initialIcon }).addTo(map);\n    initialMarker.bindPopup('Initial Position').openPopup();\n    initialMarkerRef.current = initialMarker;\n\n    // Initialize polyline\n    const polyline = L.polyline([], {\n      color: '#FF4444',\n      weight: 2,\n      opacity: 0.7,\n      dashArray: '5, 10'\n    }).addTo(map);\n    polylineRef.current = polyline;\n\n    // MQTT Connection\n    const client = mqtt.connect('mqtt://broker.hivemq.com:1883');\n    const MQTT_TOPIC = 'gps/location';\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC);\n    });\n\n    client.on('message', (topic, message) => {\n      if (topic === MQTT_TOPIC) {\n        try {\n          const locationData = JSON.parse(message.toString());\n          const newPosition = [locationData.latitude, locationData.longitude];\n          \n          // Remove old current marker if it exists\n          if (currentMarkerRef.current) {\n            currentMarkerRef.current.remove();\n          }\n\n          // Add new marker\n          const newMarker = L.marker(newPosition, { icon: currentIcon }).addTo(map);\n          newMarker.bindPopup(`Current Position<br>Lat: ${locationData.latitude}<br>Lng: ${locationData.longitude}`).openPopup();\n          currentMarkerRef.current = newMarker;\n\n          // Update polyline\n          polylineRef.current.setLatLngs([jakartaCoords, newPosition]);\n\n          // Fit bounds to show both markers\n          const bounds = L.latLngBounds([jakartaCoords, newPosition]);\n          map.fitBounds(bounds, { padding: [50, 50] });\n\n        } catch (error) {\n          console.error('Error processing MQTT message:', error);\n        }\n      }\n    });\n\n    // Add zoom control\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n      if (currentMarkerRef.current) {\n        currentMarkerRef.current = null;\n      }\n      if (initialMarkerRef.current) {\n        initialMarkerRef.current = null;\n      }\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mapRef} \n      className=\"map-container\" \n      style={{ height: '100vh', width: '100%' }} \n    />\n  );\n}\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}