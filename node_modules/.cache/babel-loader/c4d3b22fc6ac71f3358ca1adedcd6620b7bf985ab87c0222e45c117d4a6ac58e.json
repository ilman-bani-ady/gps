{"ast":null,"code":"var _jsxFileName = \"/root/tesis/gps/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\n//////////////////////////\n\n// MQTT Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MQTT_BROKER = 'ws://localhost:9001';\nconst MQTT_TOPIC = 'gps/location';\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const [marker, setMarker] = useState(null);\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const mapInstance = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    setMap(mapInstance);\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(mapInstance);\n\n    // Initialize marker\n    const initialMarker = L.marker(jakartaCoords).addTo(mapInstance);\n    setMarker(initialMarker);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect(MQTT_BROKER);\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC, err => {\n        if (err) {\n          console.error('Subscription error:', err);\n        } else {\n          console.log('Subscribed successfully');\n        }\n      });\n    });\n    client.on('message', (topic, message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        const newPosition = [data.latitude, data.longitude];\n\n        // Update marker position\n        if (marker) {\n          marker.setLatLng(newPosition);\n        }\n\n        // Center map on new position\n        mapInstance.setView(newPosition);\n\n        // Optional: Log the update\n        console.log(`Updated position: ${data.latitude}, ${data.longitude}`);\n      } catch (error) {\n        console.error('Error processing message:', error);\n      }\n    });\n    client.on('error', error => {\n      console.error('MQTT Error:', error);\n    });\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(mapInstance);\n\n    // Cleanup function\n    return () => {\n      console.log('Closing MQTT connection...');\n      client.end();\n      mapInstance.remove();\n    };\n  }, [marker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 10\n  }, this);\n}\n_s(Map, \"3HmR5bwEwcRmVtLfVGJu2iy3tzI=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","turf","mqtt","jsxDEV","_jsxDEV","MQTT_BROKER","MQTT_TOPIC","Map","_s","mapRef","marker","setMarker","map","setMap","jakartaCoords","mapInstance","current","center","zoom","zoomControl","tileLayer","attribution","subdomains","maxZoom","addTo","initialMarker","client","connect","on","console","log","subscribe","err","error","topic","message","data","JSON","parse","toString","newPosition","latitude","longitude","setLatLng","setView","control","position","end","remove","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/tesis/gps/src/components/Map/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport 'leaflet/dist/leaflet.css';\nimport mqtt from 'mqtt';\n\n\n//////////////////////////\n\n// MQTT Configuration\nconst MQTT_BROKER = 'ws://localhost:9001';\nconst MQTT_TOPIC = 'gps/location';\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const [marker, setMarker] = useState(null);\n  const [map, setMap] = useState(null);\n\n  useEffect(() => {\n    // Jakarta coordinates\n    const jakartaCoords = [-6.2088, 106.8456];\n\n    // Initialize the map\n    const mapInstance = L.map(mapRef.current, {\n      center: jakartaCoords,\n      zoom: 11,\n      zoomControl: false\n    });\n    setMap(mapInstance);\n\n    // Add the dark mode tile layer\n    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      maxZoom: 20\n    }).addTo(mapInstance);\n\n    // Initialize marker\n    const initialMarker = L.marker(jakartaCoords).addTo(mapInstance);\n    setMarker(initialMarker);\n\n    // Connect to MQTT broker\n    const client = mqtt.connect(MQTT_BROKER);\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe(MQTT_TOPIC, (err) => {\n        if (err) {\n          console.error('Subscription error:', err);\n        } else {\n          console.log('Subscribed successfully');\n        }\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        const newPosition = [data.latitude, data.longitude];\n        \n        // Update marker position\n        if (marker) {\n          marker.setLatLng(newPosition);\n        }\n        \n        // Center map on new position\n        mapInstance.setView(newPosition);\n\n        // Optional: Log the update\n        console.log(`Updated position: ${data.latitude}, ${data.longitude}`);\n      } catch (error) {\n        console.error('Error processing message:', error);\n      }\n    });\n\n    client.on('error', (error) => {\n      console.error('MQTT Error:', error);\n    });\n\n    // Add zoom control to a custom position\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(mapInstance);\n\n    // Cleanup function\n    return () => {\n      console.log('Closing MQTT connection...');\n      client.end();\n      mapInstance.remove();\n    };\n  }, [marker]);\n\n  return <div ref={mapRef} className=\"map-container\" />;\n}\n\nexport default Map;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,KAAKC,IAAI,MAAM,YAAY;AAClC,OAAO,0BAA0B;AACjC,OAAOC,IAAI,MAAM,MAAM;;AAGvB;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAG,qBAAqB;AACzC,MAAMC,UAAU,GAAG,cAAc;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,MAAM,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACa,GAAG,EAAEC,MAAM,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEpCF,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,aAAa,GAAG,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC;;IAEzC;IACA,MAAMC,WAAW,GAAGf,CAAC,CAACY,GAAG,CAACH,MAAM,CAACO,OAAO,EAAE;MACxCC,MAAM,EAAEH,aAAa;MACrBI,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE;IACf,CAAC,CAAC;IACFN,MAAM,CAACE,WAAW,CAAC;;IAEnB;IACAf,CAAC,CAACoB,SAAS,CAAC,+DAA+D,EAAE;MAC3EC,WAAW,EAAE,mJAAmJ;MAChKC,UAAU,EAAE,MAAM;MAClBC,OAAO,EAAE;IACX,CAAC,CAAC,CAACC,KAAK,CAACT,WAAW,CAAC;;IAErB;IACA,MAAMU,aAAa,GAAGzB,CAAC,CAACU,MAAM,CAACI,aAAa,CAAC,CAACU,KAAK,CAACT,WAAW,CAAC;IAChEJ,SAAS,CAACc,aAAa,CAAC;;IAExB;IACA,MAAMC,MAAM,GAAGxB,IAAI,CAACyB,OAAO,CAACtB,WAAW,CAAC;IAExCqB,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCJ,MAAM,CAACK,SAAS,CAACzB,UAAU,EAAG0B,GAAG,IAAK;QACpC,IAAIA,GAAG,EAAE;UACPH,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAAC;QAC3C,CAAC,MAAM;UACLH,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACxC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFJ,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,CAACM,KAAK,EAAEC,OAAO,KAAK;MACvC,IAAI;QACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;QAC3C,MAAMC,WAAW,GAAG,CAACJ,IAAI,CAACK,QAAQ,EAAEL,IAAI,CAACM,SAAS,CAAC;;QAEnD;QACA,IAAIhC,MAAM,EAAE;UACVA,MAAM,CAACiC,SAAS,CAACH,WAAW,CAAC;QAC/B;;QAEA;QACAzB,WAAW,CAAC6B,OAAO,CAACJ,WAAW,CAAC;;QAEhC;QACAX,OAAO,CAACC,GAAG,CAAC,qBAAqBM,IAAI,CAACK,QAAQ,KAAKL,IAAI,CAACM,SAAS,EAAE,CAAC;MACtE,CAAC,CAAC,OAAOT,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC,CAAC;IAEFP,MAAM,CAACE,EAAE,CAAC,OAAO,EAAGK,KAAK,IAAK;MAC5BJ,OAAO,CAACI,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACrC,CAAC,CAAC;;IAEF;IACAjC,CAAC,CAAC6C,OAAO,CAAC3B,IAAI,CAAC;MACb4B,QAAQ,EAAE;IACZ,CAAC,CAAC,CAACtB,KAAK,CAACT,WAAW,CAAC;;IAErB;IACA,OAAO,MAAM;MACXc,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzCJ,MAAM,CAACqB,GAAG,CAAC,CAAC;MACZhC,WAAW,CAACiC,MAAM,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACtC,MAAM,CAAC,CAAC;EAEZ,oBAAON,OAAA;IAAK6C,GAAG,EAAExC,MAAO;IAACyC,SAAS,EAAC;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvD;AAAC9C,EAAA,CAhFQD,GAAG;AAAAgD,EAAA,GAAHhD,GAAG;AAkFZ,eAAeA,GAAG;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}